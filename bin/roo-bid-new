#!/usr/bin/env node
const program=require('commander')
const path=require('path')
const exists=require('fs').existsSync
const chalk=require('chalk')
const inquirer=require('inquirer')
const Metalsmith=require('metalsmith')
const ora=require('ora')
const rm=require('rimraf').sync
const checkVersion=require('../lib/check-version.js')
const renderTemplateFiles=require('../lib/render-template-files')
const transformIntoAbsolutePath=require('../lib/local-path').transformIntoAbsolutePath

program
  .usage('<type[component,page]>')
  .option('-c, --config [config]','use the specified config')
  .option('-d, --dest [dest]','the destination of page or component')
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # new a page'))
    console.log('    $ roo-bid new page')
    console.log()
    console.log(chalk.gray('    # new a component'))
    console.log('    $ roo-bid new component')
    console.log()
  })
  .on('exit',()=>{
    console.log()
  })

//保证输入new的类型
program.parse(process.argv)
if (program.args.length < 1) return program.help()


//检验new的类型是否合法
const newType=program.args[0]

if(newType!=='component'&&newType!=='page'){
  console.log(`${chalk.red(`Do not support this type <${newType}>,please choose one between component and page`)}`)
  process.exit()
} 
//检测版本，并执行主函数
checkVersion(()=>{
  main()
})

/**
 * Main
 */
function main(){
  //获取roo.config.js的位置 
  let configPath=path.join(process.cwd(),'roo.config.js')
  if(program.config){
    configPath=path.isAbsolute(program.config)?program.config:path.join(process.cwd(),program.config)
  }
  //生成page或者component
  try{
    const rooConfig=require(configPath);
    const defaultDestination=rooConfig.bid[newType==='component'?'componentDest':'pageDest'];
    inquirer.prompt([{
      type:'list',
      name:'newName',
      choices:rooConfig.bid[`${newType}s`].map(item=>item.name),
      message:`Choose one ${newType} you need`  
    }]).then(answer=>{
      const {newName}=answer
      const operand=rooConfig.bid[`${newType}s`].find(item=>item.name==newName)
      inquirer.prompt([{
        type:'input',
        name:'name',
        message:`Input the name of ${newType}`,
        default:operand.name
      }].concat(operand.prompts)).then(answer=>{
        const otherMetadata=answer;
        const finalDestination=path.join(program.dest?transformIntoAbsolutePath(program.dest):defaultDestination,otherMetadata.name);
        //判断生成目录下是否存在同名
        if(exists(finalDestination)){
          inquirer.prompt([{
            type:'confirm',
            name:'override',
            message:`The ${newType} named ${otherMetadata.name} exists!Override?`
          }]).then(answer=>{
            const {override} = answer
            if(override){
              rm(finalDestination)
              newPageOrComponent(operand.path,finalDestination,otherMetadata);
            }else{
              process.exit();
            }
          })
        }else{
          newPageOrComponent(operand.path,finalDestination,otherMetadata);
        }
      })
    })
  }catch(e){
    let curPath=path.join(process.cwd(),'roo.config.js');
    console.log(`${chalk.red(`Cannot find module ${curPath}, please create it \n or default path is error`)}`); return;
  }
}
/**
 * 
 * @param {String}source 
 * @param {String}destination 
 */
function newPageOrComponent(source,destination,otherMetadata){
  const spinner = ora(`Newing ${newType}...`).start()
  const metalsmith=Metalsmith(source)
  //加入新的全局变量
  Object.assign(metalsmith.metadata(),otherMetadata)
  //使用中间件
  metalsmith.use(renderTemplateFiles())
  //最后生成
  metalsmith
  .source('.')
  .destination(destination)
  .clean(false)
  .build(function(err) {      
    spinner.stop()
    if (err) throw err
    console.log()
    console.log(chalk.green('New Successfully'))
    console.log()
    console.log((`${chalk.green('Please cd')} ${destination} ${chalk.green(`to check your ${newType}`)}`))
    console.log()
  })
}